node.js? < 크게

- 브라우저에만 국한되어 있던 자바스크립트를 V8엔진을 이용하여
브라우저 밖에서도 사용할 수 있게 해방시킨 것, 그것이 노드js의 시발점


node.js설치방법 < 중간

★https://nodejs.org/ko/
노드 홈페이지에서 LTS버전 다운로드

설치 완료후 cmd 창에서 node -v를 쳤을때
버전이 나온다면 설치 성공.

node라고 타이핑시 ">"표시가 나오면 자바스크립트를 사용가능.
ex)console.log(1+1); -> 2, undefined출력됨.

ctrl+c 1번 누를시 exit창 생성, 한번더 누를시 스크립트모드 종료



에디터 < 크게

아톰(에디터) < 중간
에디터 -> 소스코드를 수정하는데 사용되는 전문적인 소프트웨어

설치후 프로젝트탭에 폴더 생성,

아톰 패키지 < 중간

emmet? 각종 편리한 문법 보조
setting->install->emmet 검색, 설치

script? 아톰 내부에서 웹에서 컴파일 한 것 처럼 
실행 결과를 보여주는 패키지. 자바스크립트,파이썬 등등가능
setting->install->script 검색, 설치


첫 웹서버 구동.< 크게

main.js파일을 내려받아 실행
해당 파일 경로에서 node main.js로 실행


response.end(dirname+ url)의 패턴을 통해서
end괄호 안에 들어가는 값이 서버에 출력 되게 함.



데이터의 종류와 처리방법 < 중간
Number
String


문자표현식 <중간

\(역슬래시)코드상에서만 줄바꿈처리
문자상 처리가 되려면 \n

원래 ''(따옴표)안에 작성하던 문자열을
``(물결아래)안에 작성을 하면 ${var}를 사용가능.
${var}를 사용하면 줄바꿈이나 문자열따옴표 재사용등의 번거로움이 사라짐.


URL의 이해 < 중간

http://opentutorials.org:3000/main?id=HTML&page=12

http -> protocol

opentutoirials.org -> host(domain)

3000 -> port(서버의 어떤출입구인지)

main -> path(어떤 디렉토리의 어떤 파일인지)

id=HTML&page=12 -> query string (쿼리스트링의 시작은 ?로 약속,

값과 값의 구분은 &, 값의 이름과 값은 =로 구분)


query string마다 다른 값을 주기 < 크게

main.js 수정진행

var http = require('http');
var fs = require('fs');

var app = http.createServer(function(request,response){
    var _url = request.url;
    console.log(_url);
    if(_url == '/'){
      _url = '/index.html';
    }
    if(_url == '/favicon.ico'){
      return response.writeHead(404);
    }
    response.writeHead(200);
    response.end(fs.readFileSync(__dirname + url));

});
app.listen(3000);   < 블럭감싸기

에서

var http = require('http');
var fs = require('fs');
//require 요구하다 무엇을? url을.
//기능을 비슷한 것 끼리 그룹핑 해놓은 것을 모듈이라고 함. url이라는 모듈을 사용
var url = require('url');


var app = http.createServer(function(request,response){
    var _url = request.url;
    //queryData에 담겨있는 값은 객체이다.
    var queryData = url.parse(_url, true).query;
    console.log(queryData.id);
    if(_url == '/'){
      _url = '/index.html';
    }
    if(_url == '/favicon.ico'){
      return response.writeHead(404);
    }
    response.writeHead(200);
    //사용자가 접속한 url에 따라서 다른 파일들을 읽어주는 코드
    response.end(queryData.id);
});
app.listen(3000);   < 블럭감싸기


http://localhost:3000/?id= < 굵은글씨 작은강조

여기 주소중 id 뒤에 들어오는 값이 무엇이냐 따라서 해당 값이 적용이 된다.


app제작, 동적인 웹페이지 만들기 < 크게

정적인 페이지 1.html을 복사해와서
main.js에 변수선언후 `` 사이에 붙여넣기.

해당 html코드 중 쿼리스트링에 따라서 바뀌었으면 하는 게 있다면?
${ }로 감싼다.

해당 ${}로 감쌈으로써 정적인 title이 동적으로 변화 할 수 있다.

var http = require('http');
var fs = require('fs');
//require 요구하다 무엇을? url을.
//기능을 비슷한 것 끼리 그룹핑 해놓은 것을 모듈이라고 함. url이라는 모듈을 사용
var url = require('url');


var app = http.createServer(function(request,response){
    var _url = request.url;
    //queryData에 담겨있는 값은 객체이다.
    var queryData = url.parse(_url, true).query;
    var title = queryData.id;

    if(_url == '/'){
    title = 'Welcome';
    }
    if(_url == '/favicon.ico'){
      return response.writeHead(404);
    }
    response.writeHead(200);

    var template = `
    <!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      <ol>
        <li><a href="/?id=HTML">HTML</a></li>
        <li><a href="/?id=CSS">CSS</a></li>
        <li><a href="/?id=JavaScript">JavaScript</a></li>
      </ol>
      <h2>${title}</h2>
      <p><a href="https://www.w3.org/TR/html5/" target="_blank" title="html5 speicification">Hypertext Markup Language (HTML)</a> is the standard markup language for <strong>creating <u>web</u> pages</strong> and web applications.Web browsers receive HTML documents from a web server or from local storage and render them into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.
      <img src="coding.jpg" width="100%">
      </p><p style="margin-top:45px;">HTML elements are the building blocks of HTML pages. With HTML constructs, images and other objects, such as interactive forms, may be embedded into the rendered page. It provides a means to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes and other items. HTML elements are delineated by tags, written using angle brackets.
      </p>
    </body>
    </html>
    `
    // response.end(fs.readFileSync(__dirname + url));
    //사용자가 접속한 url에 따라서 다른 파일들을 읽어주는 코드
    //queryData.id에서  template로 변경
    response.end(template);
});
app.listen(3000); < 블럭감싸기



Node.js의 파일 읽기 기능 < 크게

C.R.U.D

Create
Read
Update
Delete

노드js로 파일을 읽는 법

https://nodejs.org/dist/latest-v6.x/docs/api/fs.html#fs_fs_readfile_file_options_callback

본문을 별도의 파일로 보관하여, 읽어들일때 fuction(err,date)함수 내에서
data를 description로 바꾸어 해당 매개변수로 웹 페이지 파일을 호출해내어
대입하는 형식.

var http = require('http');
var fs = require('fs');
//require 요구하다 무엇을? url을.
//기능을 비슷한 것 끼리 그룹핑 해놓은 것을 모듈이라고 함. url이라는 모듈을 사용
var url = require('url');


var app = http.createServer(function(request,response){
    var _url = request.url;
    //queryData에 담겨있는 값은 객체이다.
    var queryData = url.parse(_url, true).query;
    var title = queryData.id;

    if(_url == '/'){
    title = 'Welcome';
    }
    if(_url == '/favicon.ico'){
      return response.writeHead(404);
    }
    response.writeHead(200);
    //data디렉토리 밑에 있는 queryData.id =title
    fs.readFile(`data/${title}`, 'utf8' , function(err,description){
    var template = `
    <!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      <ol>
        <li><a href="/?id=HTML">HTML</a></li>
        <li><a href="/?id=CSS">CSS</a></li>
        <li><a href="/?id=JavaScript">JavaScript</a></li>
      </ol>
      <h2>${title}</h2>
      <p>${description}</p>
    </body>
    </html>
    `;
    // response.end(fs.readFileSync(__dirname + url));
    //사용자가 접속한 url에 따라서 다른 파일들을 읽어주는 코드
    //queryData.id에서  template로 변경
    response.end(template);
  })
});
app.listen(3000); < 블럭감싸기

데이터 타입 < 중간
==비교와
===비교

제어문과 조건문 < 중간

콘솔에서의 입력값 < 작은강조
input ->
parameter(입력되는 정보의 형식)
argumnet(형식에 따라 맞게 입력된 정보)

output ->
출력,파일저장등등..

node syntax/conditional.js egoing

var args =process.argv;
console.log(args);
console.log('A');
console.log('B');
if(false){
  console.log('C1');
} else{
  console.log('C2');
}
console.log('D'); < 블럭감싸기

input 정보에는 3번째 매개변수 부터 입력값을 저장한다.
그래서 args[] 배열의 2번째 배열값부터는 입력값이다.

var args =process.argv;
console.log(args[2]);
console.log('A');
console.log('B');
if(args[2] === '1'){
  console.log('C1');
} else{
  console.log('C2');
}
console.log('D'); < 블럭감싸기

입력값에 따라 저장된 배열값을 이용하여 보다 효율적인 프로그래밍 가능

app제작, Not found 구현 <크게

아래코드에서 시작

var http = require('http');
var fs = require('fs');
//require 요구하다 무엇을? url을.
//기능을 비슷한 것 끼리 그룹핑 해놓은 것을 모듈이라고 함. url이라는 모듈을 사용
var url = require('url');


var app = http.createServer(function(request,response){
    var _url = request.url;
    //queryData에 담겨있는 값은 객체이다.
    var queryData = url.parse(_url, true).query;
    var title = queryData.id;

    if(_url == '/'){
    title = 'Welcome';
    }
    if(_url == '/favicon.ico'){
      return response.writeHead(404);
    }
    response.writeHead(200);
    //data디렉토리 밑에 있는 queryData.id =title
    fs.readFile(`data/${title}`, 'utf8' , function(err,description){
    var template = `
    <!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      <ol>
        <li><a href="/?id=HTML">HTML</a></li>
        <li><a href="/?id=CSS">CSS</a></li>
        <li><a href="/?id=JavaScript">JavaScript</a></li>
      </ol>
      <h2>${title}</h2>
      <p>${description}</p>
    </body>
    </html>
    `;
    // response.end(fs.readFileSync(__dirname + url));
    //사용자가 접속한 url에 따라서 다른 파일들을 읽어주는 코드
    //queryData.id에서  template로 변경
    response.end(template);
  })
});

app.listen(3000); < 블럭감싸기


사용자가 쿼리스트링이 없는 WEB(홈으로 들어왔을때)
사용자가 id값이 있는 페이지로 들어왔을때,
해당되지 않는 전혀다른 주소로 들어왔을때, 파일이 없음 not found표시


App제작-홈페이지 구현 <크게

앞서만든 pathname의 값을 통해서는 홈과 각각의 페이지 구분이 불가함
->반복문 중첩을 통해서 해당 값을 구분할 수 있다.

'queryData.io'


var http = require('http');
var fs = require('fs');
//require 요구하다 무엇을? url을.
//기능을 비슷한 것 끼리 그룹핑 해놓은 것을 모듈이라고 함. url이라는 모듈을 사용
var url = require('url');


var app = http.createServer(function(request,response){
    var _url = request.url;
    //queryData에 담겨있는 값은 객체이다.
    var queryData = url.parse(_url, true).query;
    var pathname = url.parse(_url, true).pathname;
    var title = queryData.id;

    //주어진 URL정보를 분석해서 보여준다.
    // console.log(url.parse(_url, true));
     // console.log(url.parse(_url, true).pathname);

     if(pathname === '/'){

    //data디렉토리 밑에 있는 queryData.id =title
    fs.readFile(`data/${title}`, 'utf8' , function(err,description){
    var template = `
    <!doctype html>
    <html>
    <head>
      <title>WEB1 - ${title}</title>
      <meta charset="utf-8">
    </head>
    <body>
      <h1><a href="/">WEB</a></h1>
      <ol>
        <li><a href="/?id=HTML">HTML</a></li>
        <li><a href="/?id=CSS">CSS</a></li>
        <li><a href="/?id=JavaScript">JavaScript</a></li>
      </ol>
      <h2>${title}</h2>
      <p>${description}</p>
    </body>
    </html>
    `;
    response.writeHead(200);
    // response.end(fs.readFileSync(__dirname + url));
    //사용자가 접속한 url에 따라서 다른 파일들을 읽어주는 코드
    //queryData.id에서  template로 변경
    response.end(template);
  })
  } else {
    response.writeHead(404);
    response.end('Not Found');
  }

});
app.listen(3000); < 블럭감싸기

서버종료오류 이슈발생 < 중간

원인 : 로컬호스트 포트가 이미 사용중인 이슈
해결 : 프로세스상에 살아있는 node프로세스 강제종료


