점표기법?

var mydoc = {
_id: objectId("5099803df3f4948bd2f98391"),
name:{first:"Alan", last:"Turing"},
birth: new Date('Jun 23,1912'),
death: new Date('Jun 07, 1954'),
contribs: ["Turing machine", "Turing test", "Turingery"],
views: numberLong(1250000)
}

mydoc이라는 document가 존재한다고 가정,
Alan이라는 값을 찾을떄?
db.user.find({name:{first:"Alan"}})라고 하면 될까?
못찾아옴
왜냐, last값이 있어서

그래서 어떻게 하냐
db.user.find({"name.first":"Alan"}})
이렇게 점표기를 통해 찾음


★점표기를 통한 원하는 값 찾아오기

> db.inventory.find().pretty()
{
        "_id" : ObjectId("5dc3a2b5a16174ed6a4c3d2d"),
        "code" : "123",
        "tags" : {
                "hello" : "world",
                "fruits" : "apple"
        }
}

//원하는 값을 정확히 찾아옴
> db.inventory.find({"tags.hello":"world"}).pretty()
{
        "_id" : ObjectId("5dc3a2b5a16174ed6a4c3d2d"),
        "code" : "123",
        "tags" : {
                "hello" : "world",
                "fruits" : "apple"
        }
}
//쿼리가 잘못되진 않았지만 맞는 값을 인식 못한다.
> db.inventory.find({"tags":{hello:"world"}}).pretty()
>
>


★document의 배열값 가져오기
마찬가지로 점표기법을 통해 배열의 첫번째=0, 두번째=1...
식으로 가져온다.
마찬가지로 더 복잡한 구조로 검색해볼 수 있다.
이미지 2개 더 첨부

★논리연산자와 비교연산자
연산자 사용시 '$' 누락안되게 조심

db.number.insertMany({num:10},

★논리연산자 예시
> db.number.find().pretty()
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2e"), "num" : 10 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2f"), "num" : 42 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d30"), "num" : 200 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d31"), "num" : 123 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
> db.number.find({num:{$gte:23}})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2f"), "num" : 42 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d30"), "num" : 200 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d31"), "num" : 123 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
> db.number.find({num:{$gte:23, $lt:100}})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2f"), "num" : 42 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
> db.number.find({num:{$in:[23,26,100]}})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
> db.number.find({num:{$nin:[23,26,100]}})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2e"), "num" : 10 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2f"), "num" : 42 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d30"), "num" : 200 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d31"), "num" : 123 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
>


★or 예시
> db.number.find({$or:[{num:23},{num:26}]})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
> db.number.find({$or:[{num:23},{_id:ObjectId("5dc3c1b6a16174ed6a4c3d33")}]})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
>

not 예시 
> db.number.find({num:{$not:{$lte:10}}})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2f"), "num" : 42 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d30"), "num" : 200 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d31"), "num" : 123 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
{ "_id" : ObjectId("5dc3c2cca16174ed6a4c3d35"), "num" : [ 11, 12, 25 ] }
> db.number.find({num:{$not:{$lte:20}}})
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d2f"), "num" : 42 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d30"), "num" : 200 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d31"), "num" : 123 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d32"), "num" : 23 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d33"), "num" : 32 }
{ "_id" : ObjectId("5dc3c1b6a16174ed6a4c3d34"), "num" : 26 }
>


★Evaluation 연산자
$mod
$regex
$text
$where

regex연산자와 text연산자
text연산자의 search기능을 사용시에 인덱스를 생성한
부분에 대해서만 사용을 가능함


index를 설정하면 field의 value값을 가지고 document들을 가리키는 포인터 값으로 이뤄진 B-Tree를 만든다.

이처럼 인덱스를 생성한 field는 더 빠른 쿼리를 수행할 수 있다.
인덱스는 collection에 생성

db.stores.createIndex({name:"text", description:"text"})

Text연산자 한단어 검색시
> db.articles.find( { $text: { $search: "searchText" } } )

Text연산자 여러단어 검색시(띄어쓰기)
> db.articles.find( { $text: { $search: "searchText1 searchText2 searchText3" } } )

Text연산자 띄어쓰기를 포함한 구절을 검색
> db.articles.find( { $text: { $search: "\"search Text\"" } } )